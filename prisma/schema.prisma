generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String    @id @default(uuid())
  name       String
  userId     String
  categories Category[] @relation("StoreToCategory")
  products   Product[]  @relation("StoreToProduct")
  orders     Order[]    @relation("StoreToOrder")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Category {
  id            String         @id @default(uuid())
  storeId       String         // Foreign Key to Store
  store         Store          @relation("StoreToCategory", fields: [storeId], references: [id])
  name          String
  products    Product[]   @relation("CategoryToProduct")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subcategories Subcategory[]  @relation("SubcategoryToCategory")
  
  @@index([storeId])
}

model Subcategory {
  id         String       @id @default(uuid())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  categoryId String
  category   Category     @relation("SubcategoryToCategory", fields: [categoryId], references: [id]) 
  products   Product[]    @relation("SubcategoryToProduct")
  @@index([categoryId])
}

model Product {
  id          String    @id @default(uuid())
  storeId     String    
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  subcategoryId String  
  subcategory   Subcategory @relation("SubcategoryToProduct", fields: [subcategoryId], references: [id])
  name        String
  price       Decimal
  offerPrice  Decimal?
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  images      Image[]   
  orderItems  OrderItem[]   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([subcategoryId])
}

model Order {
  id          String    @id @default(uuid())
  storeId     String   
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems  OrderItem[] 
  isPaid      Boolean   @default(false)
  phone       String    @default("")
  address     String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([storeId])
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String   
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String   
  product    Product  @relation(fields: [productId], references: [id])
  
  @@index([orderId])
  @@index([productId])
}

model Image {
  id         String   @id @default(uuid())
  productId  String   
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String   
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@index([productId])
}

// model Size {
//   id          String    @id @default(uuid())
//   storeId     String    // Foreign Key to Store
//   store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
//   name        String
//   value       String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@index([storeId])
// }

// model Color {
//   id          String   @id @default(uuid())
//   storeId     String   // Foreign Key to Store
//   store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
//   name        String
//   value       String
//   products    Product[] // Relation to Product model
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt

//   @@index([storeId])
// }

